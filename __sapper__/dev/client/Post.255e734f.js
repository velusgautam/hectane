import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, e as element, a as space, t as text, p as create_component, c as claim_element, b as children, h as detach_dev, f as claim_space, g as claim_text, q as claim_component, j as attr_dev, k as add_location, l as insert_dev, m as append_dev, r as mount_component, n as set_data_dev, u as transition_in, x as transition_out, y as destroy_component } from './client.c86a66ef.js';
import { a as authors, A as Author } from './Author.737f51d4.js';

const getAuthors = async (data = [], fetch) => {
  const authorIds = new Set();
  let authorMap = new Map();
  let authorData = [];

  authors.subscribe((value) => {
    authorMap = value;
  });

  // creating unique author ids from the posts
  data.forEach((d) => {
    if (!authorMap.get(d.authorId)) {
      authorIds.add(d.authorId);
    }
  });

  if (authorIds.size > 0) {
    // getting author data for all unique authors to avoid multi fetch
    authorData = await Promise.all(
      Array.from(authorIds).map(async (id) => {
        // feching author data
        const res = await fetch(`http://localhost:3200/users/${id}`);
        return res.json();
      })
    );
    // creating a Map to hold unique authors by authorId as key
    authorData.forEach((u) => {
      authorMap.set(u._id, u);
    });
    authors.set(authorMap);
  }

  return authorMap;
};

/* src/components/Post.svelte generated by Svelte v3.21.0 */
const file = "src/components/Post.svelte";

function create_fragment(ctx) {
	let div1;
	let a0;
	let img;
	let img_src_value;
	let img_alt_value;
	let a0_href_value;
	let t0;
	let div0;
	let a1;
	let h3;
	let t1_value = /*post*/ ctx[0].title + "";
	let t1;
	let t2;
	let p;
	let t3_value = /*post*/ ctx[0].subTitle + "";
	let t3;
	let a1_href_value;
	let t4;
	let current;

	const author_1 = new Author({
			props: {
				name: /*author*/ ctx[1].name,
				avathar: /*author*/ ctx[1].avathar,
				createdDate: /*post*/ ctx[0].createdDate
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div1 = element("div");
			a0 = element("a");
			img = element("img");
			t0 = space();
			div0 = element("div");
			a1 = element("a");
			h3 = element("h3");
			t1 = text(t1_value);
			t2 = space();
			p = element("p");
			t3 = text(t3_value);
			t4 = space();
			create_component(author_1.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			a0 = claim_element(div1_nodes, "A", { href: true, rel: true, class: true });
			var a0_nodes = children(a0);
			img = claim_element(a0_nodes, "IMG", { class: true, src: true, alt: true });
			a0_nodes.forEach(detach_dev);
			t0 = claim_space(div1_nodes);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			a1 = claim_element(div0_nodes, "A", { href: true, class: true, rel: true });
			var a1_nodes = children(a1);
			h3 = claim_element(a1_nodes, "H3", { class: true });
			var h3_nodes = children(h3);
			t1 = claim_text(h3_nodes, t1_value);
			h3_nodes.forEach(detach_dev);
			t2 = claim_space(a1_nodes);
			p = claim_element(a1_nodes, "P", { class: true });
			var p_nodes = children(p);
			t3 = claim_text(p_nodes, t3_value);
			p_nodes.forEach(detach_dev);
			a1_nodes.forEach(detach_dev);
			t4 = claim_space(div0_nodes);
			claim_component(author_1.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(img, "class", "post--title-image svelte-g9b0pe");
			if (img.src !== (img_src_value = `https://assets.hectane.com/${/*post*/ ctx[0].route}/listing.jpg`)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", img_alt_value = /*post*/ ctx[0].route);
			add_location(img, file, 94, 4, 1803);
			attr_dev(a0, "href", a0_href_value = `./blog/${/*post*/ ctx[0].route}`);
			attr_dev(a0, "rel", "prefetch");
			attr_dev(a0, "class", "svelte-g9b0pe");
			add_location(a0, file, 93, 2, 1750);
			attr_dev(h3, "class", "post--title svelte-g9b0pe");
			add_location(h3, file, 101, 6, 2028);
			attr_dev(p, "class", "post--subTitle svelte-g9b0pe");
			add_location(p, file, 102, 6, 2076);
			attr_dev(a1, "href", a1_href_value = `./blog/${/*post*/ ctx[0].route}`);
			attr_dev(a1, "class", "post--header svelte-g9b0pe");
			attr_dev(a1, "rel", "prefetch");
			add_location(a1, file, 100, 4, 1952);
			attr_dev(div0, "class", "svelte-g9b0pe");
			add_location(div0, file, 99, 2, 1942);
			attr_dev(div1, "class", "post--container svelte-g9b0pe");
			add_location(div1, file, 91, 0, 1717);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, a0);
			append_dev(a0, img);
			append_dev(div1, t0);
			append_dev(div1, div0);
			append_dev(div0, a1);
			append_dev(a1, h3);
			append_dev(h3, t1);
			append_dev(a1, t2);
			append_dev(a1, p);
			append_dev(p, t3);
			append_dev(div0, t4);
			mount_component(author_1, div0, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (!current || dirty & /*post*/ 1 && img.src !== (img_src_value = `https://assets.hectane.com/${/*post*/ ctx[0].route}/listing.jpg`)) {
				attr_dev(img, "src", img_src_value);
			}

			if (!current || dirty & /*post*/ 1 && img_alt_value !== (img_alt_value = /*post*/ ctx[0].route)) {
				attr_dev(img, "alt", img_alt_value);
			}

			if (!current || dirty & /*post*/ 1 && a0_href_value !== (a0_href_value = `./blog/${/*post*/ ctx[0].route}`)) {
				attr_dev(a0, "href", a0_href_value);
			}

			if ((!current || dirty & /*post*/ 1) && t1_value !== (t1_value = /*post*/ ctx[0].title + "")) set_data_dev(t1, t1_value);
			if ((!current || dirty & /*post*/ 1) && t3_value !== (t3_value = /*post*/ ctx[0].subTitle + "")) set_data_dev(t3, t3_value);

			if (!current || dirty & /*post*/ 1 && a1_href_value !== (a1_href_value = `./blog/${/*post*/ ctx[0].route}`)) {
				attr_dev(a1, "href", a1_href_value);
			}

			const author_1_changes = {};
			if (dirty & /*author*/ 2) author_1_changes.name = /*author*/ ctx[1].name;
			if (dirty & /*author*/ 2) author_1_changes.avathar = /*author*/ ctx[1].avathar;
			if (dirty & /*post*/ 1) author_1_changes.createdDate = /*post*/ ctx[0].createdDate;
			author_1.$set(author_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(author_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(author_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			destroy_component(author_1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { post } = $$props;
	let { author } = $$props;
	const writable_props = ["post", "author"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Post> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Post", $$slots, []);

	$$self.$set = $$props => {
		if ("post" in $$props) $$invalidate(0, post = $$props.post);
		if ("author" in $$props) $$invalidate(1, author = $$props.author);
	};

	$$self.$capture_state = () => ({ Author, post, author });

	$$self.$inject_state = $$props => {
		if ("post" in $$props) $$invalidate(0, post = $$props.post);
		if ("author" in $$props) $$invalidate(1, author = $$props.author);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [post, author];
}

class Post extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { post: 0, author: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Post",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*post*/ ctx[0] === undefined && !("post" in props)) {
			console.warn("<Post> was created without expected prop 'post'");
		}

		if (/*author*/ ctx[1] === undefined && !("author" in props)) {
			console.warn("<Post> was created without expected prop 'author'");
		}
	}

	get post() {
		throw new Error("<Post>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set post(value) {
		throw new Error("<Post>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get author() {
		throw new Error("<Post>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set author(value) {
		throw new Error("<Post>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Post as P, getAuthors as g };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUG9zdC4yNTVlNzM0Zi5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL19oZWxwZXJzL2dldC1hdXRob3JzLmpzIiwiLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvUG9zdC5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXV0aG9ycyB9IGZyb20gJy4vc3RvcmUuanMnO1xuXG5leHBvcnQgY29uc3QgZ2V0QXV0aG9ycyA9IGFzeW5jIChkYXRhID0gW10sIGZldGNoKSA9PiB7XG4gIGNvbnN0IGF1dGhvcklkcyA9IG5ldyBTZXQoKTtcbiAgbGV0IGF1dGhvck1hcCA9IG5ldyBNYXAoKTtcbiAgbGV0IGF1dGhvckRhdGEgPSBbXTtcblxuICBhdXRob3JzLnN1YnNjcmliZSgodmFsdWUpID0+IHtcbiAgICBhdXRob3JNYXAgPSB2YWx1ZTtcbiAgfSk7XG5cbiAgLy8gY3JlYXRpbmcgdW5pcXVlIGF1dGhvciBpZHMgZnJvbSB0aGUgcG9zdHNcbiAgZGF0YS5mb3JFYWNoKChkKSA9PiB7XG4gICAgaWYgKCFhdXRob3JNYXAuZ2V0KGQuYXV0aG9ySWQpKSB7XG4gICAgICBhdXRob3JJZHMuYWRkKGQuYXV0aG9ySWQpO1xuICAgIH1cbiAgfSk7XG5cbiAgaWYgKGF1dGhvcklkcy5zaXplID4gMCkge1xuICAgIC8vIGdldHRpbmcgYXV0aG9yIGRhdGEgZm9yIGFsbCB1bmlxdWUgYXV0aG9ycyB0byBhdm9pZCBtdWx0aSBmZXRjaFxuICAgIGF1dGhvckRhdGEgPSBhd2FpdCBQcm9taXNlLmFsbChcbiAgICAgIEFycmF5LmZyb20oYXV0aG9ySWRzKS5tYXAoYXN5bmMgKGlkKSA9PiB7XG4gICAgICAgIC8vIGZlY2hpbmcgYXV0aG9yIGRhdGFcbiAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goYEJBU0VfUEFUSC91c2Vycy8ke2lkfWApO1xuICAgICAgICByZXR1cm4gcmVzLmpzb24oKTtcbiAgICAgIH0pXG4gICAgKTtcbiAgICAvLyBjcmVhdGluZyBhIE1hcCB0byBob2xkIHVuaXF1ZSBhdXRob3JzIGJ5IGF1dGhvcklkIGFzIGtleVxuICAgIGF1dGhvckRhdGEuZm9yRWFjaCgodSkgPT4ge1xuICAgICAgYXV0aG9yTWFwLnNldCh1Ll9pZCwgdSk7XG4gICAgfSk7XG4gICAgYXV0aG9ycy5zZXQoYXV0aG9yTWFwKTtcbiAgfVxuXG4gIHJldHVybiBhdXRob3JNYXA7XG59O1xuIiwiPHNjcmlwdD5cbiAgaW1wb3J0IEF1dGhvciBmcm9tIFwiLi9BdXRob3Iuc3ZlbHRlXCI7XG4gIGV4cG9ydCBsZXQgcG9zdDtcbiAgZXhwb3J0IGxldCBhdXRob3I7XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuICAucG9zdC0tY29udGFpbmVyIHtcbiAgICAvKiBncmlkLWFyZWE6IHBvc3Q7ICovXG4gICAgYWxpZ24tc2VsZjogc3RhcnQ7XG4gIH1cbiAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA4MDBweCkge1xuICAgIC5saXN0aW5nLS1jb250YWluZXIgPiA6bnRoLWNoaWxkKDEpIHtcbiAgICAgIGdyaWQtY29sdW1uOiAxIC8gNDtcbiAgICAgIGRpc3BsYXk6IGdyaWQ7XG4gICAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDJmciAxZnI7XG4gICAgICBncmlkLWNvbHVtbi1nYXA6IDVweDtcbiAgICB9XG5cbiAgICAubGlzdGluZy0tY29udGFpbmVyIDpudGgtY2hpbGQoMSkgLnBvc3QtLXRpdGxlLWltYWdlIHtcbiAgICAgIGdyaWQtY29sdW1uOiAxIC8gMjtcbiAgICAgIGdyaWQtcm93OiAxIC8gNDtcbiAgICAgIGFsaWduLXNlbGY6IHN0YXJ0O1xuICAgICAgLyogaGVpZ2h0OiAzNTBweDsgKi9cbiAgICB9XG5cbiAgICAubGlzdGluZy0tY29udGFpbmVyIDpudGgtY2hpbGQoMSkgLnBvc3QtLWhlYWRlciB7XG4gICAgICBtYXJnaW4tdG9wOiAwcHg7XG4gICAgICBtYXJnaW4tbGVmdDogMTVweDtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIH1cblxuICAgIC5saXN0aW5nLS1jb250YWluZXIgOm50aC1jaGlsZCgxKSAucG9zdC0taGVhZGVyIC5wb3N0LS10aXRsZSxcbiAgICAubGlzdGluZy0tY29udGFpbmVyIDpudGgtY2hpbGQoMSkgLnBvc3QtLWhlYWRlciAucG9zdC0tc3ViVGl0bGUge1xuICAgICAgbWFyZ2luLXRvcDogMHB4O1xuICAgIH1cblxuICAgIDpnbG9iYWwoLmxpc3RpbmctLWNvbnRhaW5lciA6bnRoLWNoaWxkKDEpIC5wb3N0LS1hdXRob3IpIHtcbiAgICAgIGdyaWQtY29sdW1uOiAyIC8gMztcbiAgICAgIGdyaWQtcm93OiAzIC8gNDtcbiAgICAgIGFsaWduLXNlbGY6IHN0YXJ0O1xuICAgICAgbWFyZ2luLWxlZnQ6IDE1cHg7XG4gICAgfVxuICB9XG5cbiAgLnBvc3QtLXRpdGxlLWltYWdlIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBtYXJnaW4tYm90dG9tOiAxNXB4O1xuICAgIHdpZHRoOiAxMDAlO1xuICB9XG5cbiAgYSB7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgIGNvbG9yOiB2YXIoLS10ZXh0QmxhY2spO1xuICB9XG5cbiAgLnBvc3QtLXRpdGxlIHtcbiAgICBmb250LXNpemU6IDEuNXJlbTtcbiAgICBmb250LXdlaWdodDogNTAwO1xuICB9XG5cbiAgLyogLnBvc3QtLWF1dGhvciB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGFuaW1hdGlvbjogZmFsbGRvd24gMXMgZWFzZTtcbiAgfVxuXG4gIC5wb3N0LS1hdXRob3IgLmltZyB7XG4gICAgYm9yZGVyLXJhZGl1czogMTAwJTtcbiAgICBib3JkZXI6IDJweCBzb2xpZCAjYjNiM2IzO1xuICAgIGJveC1zaGFkb3c6IC0zcHggNnB4IDZweCAjZDhkOGQ4O1xuICB9XG5cbiAgLmRldGFpbHMge1xuICAgIGZvbnQtc2l6ZTogc21hbGw7XG4gICAgbWFyZ2luLWxlZnQ6IDhweDtcbiAgfSAqL1xuXG4gIEBrZXlmcmFtZXMgZmFsbGRvd24ge1xuICAgIDAlIHtcbiAgICAgIG9wYWNpdHk6IDA7XG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwcHgpO1xuICAgIH1cblxuICAgIDEwMCUge1xuICAgICAgb3BhY2l0eTogMTtcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwKTtcbiAgICB9XG4gIH1cbjwvc3R5bGU+XG5cbjxkaXYgY2xhc3M9XCJwb3N0LS1jb250YWluZXJcIj5cblxuICA8YSBocmVmPXtgLi9ibG9nLyR7cG9zdC5yb3V0ZX1gfSByZWw9XCJwcmVmZXRjaFwiPlxuICAgIDxpbWdcbiAgICAgIGNsYXNzPVwicG9zdC0tdGl0bGUtaW1hZ2VcIlxuICAgICAgc3JjPXtgQVNTRVRfQkFTRS8ke3Bvc3Qucm91dGV9L2xpc3RpbmcuanBnYH1cbiAgICAgIGFsdD17cG9zdC5yb3V0ZX0gLz5cbiAgPC9hPlxuICA8ZGl2PlxuICAgIDxhIGhyZWY9e2AuL2Jsb2cvJHtwb3N0LnJvdXRlfWB9IGNsYXNzPVwicG9zdC0taGVhZGVyXCIgcmVsPVwicHJlZmV0Y2hcIj5cbiAgICAgIDxoMyBjbGFzcz1cInBvc3QtLXRpdGxlXCI+e3Bvc3QudGl0bGV9PC9oMz5cbiAgICAgIDxwIGNsYXNzPVwicG9zdC0tc3ViVGl0bGVcIj57cG9zdC5zdWJUaXRsZX08L3A+XG4gICAgPC9hPlxuXG4gICAgPCEtLSA8ZGl2IGNsYXNzPVwicG9zdC0tYXV0aG9yXCI+XG4gICAgICA8aW1nIGNsYXNzPVwiaW1nXCIgc3JjPXthdXRob3IuYXZhdGhhcn0gYWx0PVwiVmVsdSBTIEdhdXRhbVwiIC8+XG4gICAgICA8ZGl2IGNsYXNzPVwiZGV0YWlsc1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwibmFtZVwiPnthdXRob3IubmFtZX08L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImRhdGVcIj5cbiAgICAgICAgICB7bmV3IERhdGUocG9zdC5jcmVhdGVkRGF0ZSlcbiAgICAgICAgICAgIC50b0pTT04oKVxuICAgICAgICAgICAgLnNsaWNlKDAsIDEwKVxuICAgICAgICAgICAgLnNwbGl0KCctJylcbiAgICAgICAgICAgIC5yZXZlcnNlKClcbiAgICAgICAgICAgIC5qb2luKCctJyl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+IC0tPlxuICAgIDxBdXRob3JcbiAgICAgIG5hbWU9e2F1dGhvci5uYW1lfVxuICAgICAgYXZhdGhhcj17YXV0aG9yLmF2YXRoYXJ9XG4gICAgICBjcmVhdGVkRGF0ZT17cG9zdC5jcmVhdGVkRGF0ZX0gLz5cbiAgPC9kaXY+XG5cbjwvZGl2PlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUVZLE1BQUMsVUFBVSxHQUFHLE9BQU8sSUFBSSxHQUFHLEVBQUUsRUFBRSxLQUFLLEtBQUs7QUFDdEQsRUFBRSxNQUFNLFNBQVMsR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO0FBQzlCLEVBQUUsSUFBSSxTQUFTLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztBQUM1QixFQUFFLElBQUksVUFBVSxHQUFHLEVBQUUsQ0FBQztBQUN0QjtBQUNBLEVBQUUsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssS0FBSztBQUMvQixJQUFJLFNBQVMsR0FBRyxLQUFLLENBQUM7QUFDdEIsR0FBRyxDQUFDLENBQUM7QUFDTDtBQUNBO0FBQ0EsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLO0FBQ3RCLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFO0FBQ3BDLE1BQU0sU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDaEMsS0FBSztBQUNMLEdBQUcsQ0FBQyxDQUFDO0FBQ0w7QUFDQSxFQUFFLElBQUksU0FBUyxDQUFDLElBQUksR0FBRyxDQUFDLEVBQUU7QUFDMUI7QUFDQSxJQUFJLFVBQVUsR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHO0FBQ2xDLE1BQU0sS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLEtBQUs7QUFDOUM7QUFDQSxRQUFRLE1BQU0sR0FBRyxHQUFHLE1BQU0sS0FBSyxDQUFDLENBQUMsNEJBQWdCLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3pELFFBQVEsT0FBTyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDMUIsT0FBTyxDQUFDO0FBQ1IsS0FBSyxDQUFDO0FBQ047QUFDQSxJQUFJLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUs7QUFDOUIsTUFBTSxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDOUIsS0FBSyxDQUFDLENBQUM7QUFDUCxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDM0IsR0FBRztBQUNIO0FBQ0EsRUFBRSxPQUFPLFNBQVMsQ0FBQztBQUNuQjs7Ozs7Ozs7Ozs7Ozs7Ozt5QkNrRStCLEdBQUksSUFBQyxLQUFLOzs7O3lCQUNSLEdBQUksSUFBQyxRQUFROzs7Ozs7OztxQkFrQmxDLEdBQU0sSUFBQyxJQUFJO3dCQUNSLEdBQU0sSUFBQyxPQUFPOzBCQUNWLEdBQUksSUFBQyxXQUFXOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzJFQTFCVixHQUFJLElBQUMsS0FBSztpREFDeEIsR0FBSSxJQUFDLEtBQUs7OzJEQUpBLEdBQUksSUFBQyxLQUFLOzs7Ozs7OzsyREFPUixHQUFJLElBQUMsS0FBSzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NkdBSlIsR0FBSSxJQUFDLEtBQUs7Ozs7cUZBQ3hCLEdBQUksSUFBQyxLQUFLOzs7OytGQUpBLEdBQUksSUFBQyxLQUFLOzs7OzZFQVFBLEdBQUksSUFBQyxLQUFLOzZFQUNSLEdBQUksSUFBQyxRQUFROzsrRkFGdkIsR0FBSSxJQUFDLEtBQUs7Ozs7O2dFQW9CckIsR0FBTSxJQUFDLElBQUk7bUVBQ1IsR0FBTSxJQUFDLE9BQU87bUVBQ1YsR0FBSSxJQUFDLFdBQVc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQXhIdEIsSUFBSTtPQUNKLE1BQU07Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
