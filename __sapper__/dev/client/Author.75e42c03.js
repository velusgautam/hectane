import { w as writable, S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, e as element, a as space, t as text, c as claim_element, b as children, f as claim_space, g as claim_text, h as detach_dev, j as attr_dev, k as add_location, l as insert_dev, m as append_dev, n as set_data_dev, o as noop } from './client.ff83d44f.js';

const authors = writable(new Map());

/* src/components/Author.svelte generated by Svelte v3.21.0 */

const file = "src/components/Author.svelte";

function create_fragment(ctx) {
	let div3;
	let img;
	let img_src_value;
	let t0;
	let div2;
	let div0;
	let t1;
	let t2;
	let div1;
	let t3_value = new Date(/*createdDate*/ ctx[2]).toJSON().slice(0, 10).split("-").reverse().join("-") + "";
	let t3;

	const block = {
		c: function create() {
			div3 = element("div");
			img = element("img");
			t0 = space();
			div2 = element("div");
			div0 = element("div");
			t1 = text(/*name*/ ctx[1]);
			t2 = space();
			div1 = element("div");
			t3 = text(t3_value);
			this.h();
		},
		l: function claim(nodes) {
			div3 = claim_element(nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			img = claim_element(div3_nodes, "IMG", { class: true, src: true, alt: true });
			t0 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			t1 = claim_text(div0_nodes, /*name*/ ctx[1]);
			div0_nodes.forEach(detach_dev);
			t2 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			t3 = claim_text(div1_nodes, t3_value);
			div1_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(img, "class", "img svelte-4agr4z");
			if (img.src !== (img_src_value = /*avathar*/ ctx[0])) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "Velu S Gautam");
			add_location(img, file, 38, 2, 584);
			attr_dev(div0, "class", "name");
			add_location(div0, file, 40, 4, 666);
			attr_dev(div1, "class", "date");
			add_location(div1, file, 41, 4, 701);
			attr_dev(div2, "class", "details svelte-4agr4z");
			add_location(div2, file, 39, 2, 640);
			attr_dev(div3, "class", "post--author svelte-4agr4z");
			add_location(div3, file, 37, 0, 555);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div3, anchor);
			append_dev(div3, img);
			append_dev(div3, t0);
			append_dev(div3, div2);
			append_dev(div2, div0);
			append_dev(div0, t1);
			append_dev(div2, t2);
			append_dev(div2, div1);
			append_dev(div1, t3);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*avathar*/ 1 && img.src !== (img_src_value = /*avathar*/ ctx[0])) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*name*/ 2) set_data_dev(t1, /*name*/ ctx[1]);
			if (dirty & /*createdDate*/ 4 && t3_value !== (t3_value = new Date(/*createdDate*/ ctx[2]).toJSON().slice(0, 10).split("-").reverse().join("-") + "")) set_data_dev(t3, t3_value);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div3);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { avathar } = $$props;
	let { name } = $$props;
	let { createdDate } = $$props;
	const writable_props = ["avathar", "name", "createdDate"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Author> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Author", $$slots, []);

	$$self.$set = $$props => {
		if ("avathar" in $$props) $$invalidate(0, avathar = $$props.avathar);
		if ("name" in $$props) $$invalidate(1, name = $$props.name);
		if ("createdDate" in $$props) $$invalidate(2, createdDate = $$props.createdDate);
	};

	$$self.$capture_state = () => ({ avathar, name, createdDate });

	$$self.$inject_state = $$props => {
		if ("avathar" in $$props) $$invalidate(0, avathar = $$props.avathar);
		if ("name" in $$props) $$invalidate(1, name = $$props.name);
		if ("createdDate" in $$props) $$invalidate(2, createdDate = $$props.createdDate);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [avathar, name, createdDate];
}

class Author extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { avathar: 0, name: 1, createdDate: 2 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Author",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*avathar*/ ctx[0] === undefined && !("avathar" in props)) {
			console.warn("<Author> was created without expected prop 'avathar'");
		}

		if (/*name*/ ctx[1] === undefined && !("name" in props)) {
			console.warn("<Author> was created without expected prop 'name'");
		}

		if (/*createdDate*/ ctx[2] === undefined && !("createdDate" in props)) {
			console.warn("<Author> was created without expected prop 'createdDate'");
		}
	}

	get avathar() {
		throw new Error("<Author>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set avathar(value) {
		throw new Error("<Author>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get name() {
		throw new Error("<Author>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set name(value) {
		throw new Error("<Author>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get createdDate() {
		throw new Error("<Author>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set createdDate(value) {
		throw new Error("<Author>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { Author as A, authors as a };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXV0aG9yLjc1ZTQyYzAzLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvX2hlbHBlcnMvc3RvcmUuanMiLCIuLi8uLi8uLi9zcmMvY29tcG9uZW50cy9BdXRob3Iuc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHdyaXRhYmxlIH0gZnJvbSAnc3ZlbHRlL3N0b3JlJztcblxuZXhwb3J0IGNvbnN0IGF1dGhvcnMgPSB3cml0YWJsZShuZXcgTWFwKCkpO1xuIiwiPHNjcmlwdD5cbiAgZXhwb3J0IGxldCBhdmF0aGFyO1xuICBleHBvcnQgbGV0IG5hbWU7XG4gIGV4cG9ydCBsZXQgY3JlYXRlZERhdGU7XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuICAucG9zdC0tYXV0aG9yIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgYW5pbWF0aW9uOiBmYWxsZG93biAxcyBlYXNlO1xuICB9XG5cbiAgLnBvc3QtLWF1dGhvciAuaW1nIHtcbiAgICBib3JkZXItcmFkaXVzOiAxMDAlO1xuICAgIGJvcmRlcjogMnB4IHNvbGlkICNiM2IzYjM7XG4gICAgYm94LXNoYWRvdzogLTNweCA2cHggNnB4ICNkOGQ4ZDg7XG4gIH1cblxuICAuZGV0YWlscyB7XG4gICAgZm9udC1zaXplOiBzbWFsbDtcbiAgICBtYXJnaW4tbGVmdDogOHB4O1xuICB9XG5cbiAgQGtleWZyYW1lcyBmYWxsZG93biB7XG4gICAgMCUge1xuICAgICAgb3BhY2l0eTogMC41O1xuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0xcHgpO1xuICAgIH1cblxuICAgIDEwMCUge1xuICAgICAgb3BhY2l0eTogMTtcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwKTtcbiAgICB9XG4gIH1cbjwvc3R5bGU+XG5cbjxkaXYgY2xhc3M9XCJwb3N0LS1hdXRob3JcIj5cbiAgPGltZyBjbGFzcz1cImltZ1wiIHNyYz17YXZhdGhhcn0gYWx0PVwiVmVsdSBTIEdhdXRhbVwiIC8+XG4gIDxkaXYgY2xhc3M9XCJkZXRhaWxzXCI+XG4gICAgPGRpdiBjbGFzcz1cIm5hbWVcIj57bmFtZX08L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwiZGF0ZVwiPlxuICAgICAge25ldyBEYXRlKGNyZWF0ZWREYXRlKVxuICAgICAgICAudG9KU09OKClcbiAgICAgICAgLnNsaWNlKDAsIDEwKVxuICAgICAgICAuc3BsaXQoJy0nKVxuICAgICAgICAucmV2ZXJzZSgpXG4gICAgICAgIC5qb2luKCctJyl9XG4gICAgPC9kaXY+XG4gIDwvZGl2PlxuPC9kaXY+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFFWSxNQUFDLE9BQU8sR0FBRyxRQUFRLENBQUMsSUFBSSxHQUFHLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7b0JDd0M5QixJQUFJLGlCQUFDLEdBQVcsS0FDbEIsTUFBTSxHQUNOLEtBQUssQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUNYLEtBQUssQ0FBQyxHQUFHLEVBQ1QsT0FBTyxHQUNQLElBQUksQ0FBQyxHQUFHOzs7Ozs7Ozs7O3NCQVBNLEdBQUk7Ozs7Ozs7Ozs7Ozs7Ozt3Q0FBSixHQUFJOzs7Ozs7Ozs7Ozs7O2dEQUZILEdBQU87Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt5RUFBUCxHQUFPOzs7O3FEQUVSLEdBQUk7aUVBRWhCLElBQUksaUJBQUMsR0FBVyxLQUNsQixNQUFNLEdBQ04sS0FBSyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQ1gsS0FBSyxDQUFDLEdBQUcsRUFDVCxPQUFPLEdBQ1AsSUFBSSxDQUFDLEdBQUc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQTlDSixPQUFPO09BQ1AsSUFBSTtPQUNKLFdBQVc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OyJ9
