import { S as SvelteComponentDev, i as init, d as dispatch_dev, s as safe_not_equal, z as validate_each_argument, v as validate_slots, p as create_component, q as claim_component, r as mount_component, u as transition_in, x as transition_out, y as destroy_component, e as element, a as space, A as query_selector_all, c as claim_element, h as detach_dev, f as claim_space, b as children, j as attr_dev, k as add_location, m as append_dev, l as insert_dev, B as check_outros, C as destroy_each, D as group_outros } from './client.ff83d44f.js';
import './Author.75e42c03.js';
import { g as getAuthors, P as Post } from './Post.c1a660bd.js';

/* src/routes/learnings.svelte generated by Svelte v3.21.0 */
const file = "src/routes/learnings.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[2] = list[i];
	return child_ctx;
}

// (35:2) {#each posts as post}
function create_each_block(ctx) {
	let current;

	const post = new Post({
			props: {
				post: /*post*/ ctx[2],
				author: /*authorMap*/ ctx[1].get(/*post*/ ctx[2].authorId)
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(post.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(post.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(post, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const post_changes = {};
			if (dirty & /*posts*/ 1) post_changes.post = /*post*/ ctx[2];
			if (dirty & /*authorMap, posts*/ 3) post_changes.author = /*authorMap*/ ctx[1].get(/*post*/ ctx[2].authorId);
			post.$set(post_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(post.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(post.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(post, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(35:2) {#each posts as post}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let meta;
	let t;
	let div;
	let current;
	let each_value = /*posts*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			meta = element("meta");
			t = space();
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-przq4i\"]", document.head);
			meta = claim_element(head_nodes, "META", { name: true, content: true });
			head_nodes.forEach(detach_dev);
			t = claim_space(nodes);
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Hectane | Home Page";
			attr_dev(meta, "name", "description");
			attr_dev(meta, "content", "Hectane is a simple blog covering experiences from its authors. It\n    now covers areas like Technology, Interviews, Travelogue and Learnings. I\n    Velu S Gautam (Core Developer) of the blog invite contributions from others\n    with similar experiences. The below topics are the top 10 in the page now. ");
			add_location(meta, file, 25, 2, 705);
			attr_dev(div, "class", "listing--container");
			add_location(div, file, 33, 0, 1072);
		},
		m: function mount(target, anchor) {
			append_dev(document.head, meta);
			insert_dev(target, t, anchor);
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*posts, authorMap*/ 3) {
				each_value = /*posts*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			detach_dev(meta);
			if (detaching) detach_dev(t);
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload({ path }, session) {
	const res = await this.fetch(`http://localhost:3200/posts${path}/7`);
	const data = await res.json();

	// checking if data status is 200 and data is an array
	if (res.status === 200 && Array.isArray(data)) {
		const authorMap = await getAuthors(data, this.fetch);
		return { posts: data, authorMap };
	} else {
		this.error(res.status, data.message);
	}
}

function instance($$self, $$props, $$invalidate) {
	let { posts } = $$props;
	let { authorMap } = $$props;
	const writable_props = ["posts", "authorMap"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Learnings> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Learnings", $$slots, []);

	$$self.$set = $$props => {
		if ("posts" in $$props) $$invalidate(0, posts = $$props.posts);
		if ("authorMap" in $$props) $$invalidate(1, authorMap = $$props.authorMap);
	};

	$$self.$capture_state = () => ({
		getAuthors,
		preload,
		Post,
		posts,
		authorMap
	});

	$$self.$inject_state = $$props => {
		if ("posts" in $$props) $$invalidate(0, posts = $$props.posts);
		if ("authorMap" in $$props) $$invalidate(1, authorMap = $$props.authorMap);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [posts, authorMap];
}

class Learnings extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { posts: 0, authorMap: 1 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Learnings",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*posts*/ ctx[0] === undefined && !("posts" in props)) {
			console.warn("<Learnings> was created without expected prop 'posts'");
		}

		if (/*authorMap*/ ctx[1] === undefined && !("authorMap" in props)) {
			console.warn("<Learnings> was created without expected prop 'authorMap'");
		}
	}

	get posts() {
		throw new Error("<Learnings>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set posts(value) {
		throw new Error("<Learnings>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get authorMap() {
		throw new Error("<Learnings>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set authorMap(value) {
		throw new Error("<Learnings>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Learnings;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVhcm5pbmdzLmQyNjE2Mjc4LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcm91dGVzL2xlYXJuaW5ncy5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdCBjb250ZXh0PVwibW9kdWxlXCI+XG4gIGltcG9ydCB7IGdldEF1dGhvcnMgfSBmcm9tIFwiLi4vX2hlbHBlcnMvZ2V0LWF1dGhvcnMuanNcIjtcbiAgZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHByZWxvYWQoeyBwYXRoIH0sIHNlc3Npb24pIHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLmZldGNoKGBCQVNFX1BBVEgvcG9zdHMke3BhdGh9LzdgKTtcblxuICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXMuanNvbigpO1xuXG4gICAgLy8gY2hlY2tpbmcgaWYgZGF0YSBzdGF0dXMgaXMgMjAwIGFuZCBkYXRhIGlzIGFuIGFycmF5XG4gICAgaWYgKHJlcy5zdGF0dXMgPT09IDIwMCAmJiBBcnJheS5pc0FycmF5KGRhdGEpKSB7XG4gICAgICBjb25zdCBhdXRob3JNYXAgPSBhd2FpdCBnZXRBdXRob3JzKGRhdGEsIHRoaXMuZmV0Y2gpO1xuICAgICAgcmV0dXJuIHsgcG9zdHM6IGRhdGEsIGF1dGhvck1hcCB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmVycm9yKHJlcy5zdGF0dXMsIGRhdGEubWVzc2FnZSk7XG4gICAgfVxuICB9XG48L3NjcmlwdD5cblxuPHNjcmlwdD5cbiAgaW1wb3J0IFBvc3QgZnJvbSBcIi4uL2NvbXBvbmVudHMvUG9zdC5zdmVsdGVcIjtcbiAgZXhwb3J0IGxldCBwb3N0cztcbiAgZXhwb3J0IGxldCBhdXRob3JNYXA7XG48L3NjcmlwdD5cblxuPHN2ZWx0ZTpoZWFkPlxuICA8dGl0bGU+SGVjdGFuZSB8IEhvbWUgUGFnZTwvdGl0bGU+XG4gIDxtZXRhXG4gICAgbmFtZT1cImRlc2NyaXB0aW9uXCJcbiAgICBjb250ZW50PVwiSGVjdGFuZSBpcyBhIHNpbXBsZSBibG9nIGNvdmVyaW5nIGV4cGVyaWVuY2VzIGZyb20gaXRzIGF1dGhvcnMuIEl0XG4gICAgbm93IGNvdmVycyBhcmVhcyBsaWtlIFRlY2hub2xvZ3ksIEludGVydmlld3MsIFRyYXZlbG9ndWUgYW5kIExlYXJuaW5ncy4gSVxuICAgIFZlbHUgUyBHYXV0YW0gKENvcmUgRGV2ZWxvcGVyKSBvZiB0aGUgYmxvZyBpbnZpdGUgY29udHJpYnV0aW9ucyBmcm9tIG90aGVyc1xuICAgIHdpdGggc2ltaWxhciBleHBlcmllbmNlcy4gVGhlIGJlbG93IHRvcGljcyBhcmUgdGhlIHRvcCAxMCBpbiB0aGUgcGFnZSBub3cuIFwiIC8+XG48L3N2ZWx0ZTpoZWFkPlxuXG48ZGl2IGNsYXNzPVwibGlzdGluZy0tY29udGFpbmVyXCI+XG4gIHsjZWFjaCBwb3N0cyBhcyBwb3N0fVxuICAgIDxQb3N0IHtwb3N0fSBhdXRob3I9e2F1dGhvck1hcC5nZXQocG9zdC5hdXRob3JJZCl9IC8+XG4gIHsvZWFjaH1cbjwvZGl2PlxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzBCQW1DeUIsR0FBUyxJQUFDLEdBQUcsVUFBQyxHQUFJLElBQUMsUUFBUTs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsyRUFBM0IsR0FBUyxJQUFDLEdBQUcsVUFBQyxHQUFJLElBQUMsUUFBUTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzRCQUQzQyxHQUFLOzs7O2dDQUFWLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzJCQUFDLEdBQUs7Ozs7K0JBQVYsTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozt3QkFBSixNQUFJOzs7Ozs7Ozs7O2tDQUFKLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7ZUFoQ2dCLE9BQU8sR0FBRyxJQUFJLElBQUksT0FBTztPQUN2QyxHQUFHLFNBQVMsSUFBSSxDQUFDLEtBQUssK0JBQW1CLElBQUk7T0FFN0MsSUFBSSxTQUFTLEdBQUcsQ0FBQyxJQUFJOzs7S0FHdkIsR0FBRyxDQUFDLE1BQU0sS0FBSyxHQUFHLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJO1FBQ3BDLFNBQVMsU0FBUyxVQUFVLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLO1dBQzFDLEtBQUssRUFBRSxJQUFJLEVBQUUsU0FBUzs7RUFFL0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPOzs7OztPQVY1QixLQUFLO09BQ0wsU0FBUzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
